apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuber
  labels:
    app: kuber
spec:
  replicas: 3
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: http-server
  template:
    metadata:
      labels:
        app: http-server
        # env: dev
    spec:
      containers:
      - name: kuber
        image: bakavets/kuber
        imagePullPolicy: IfNotPresent
        ports:
        - name: http-kuber
          containerPort: 8000
        volumeMounts:
          - mountPath: /cache-1
            name: cache-volume
      - name: nginx
        image: nginx
        imagePullPolicy: IfNotPresent
        ports:
        - name: http-nginx
          containerPort: 80
        volumeMounts:
          - mountPath: /cache-2
            name: cache-volume      
      volumes:
        - name: cache-volume
          emptyDir: {}
      
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: 8000
        #   initialDelaySeconds: 5
        #   periodSeconds: 5
        # livenessProbe:
        #   httpGet:
        #     path: /
        #     port: 8000
        #   initialDelaySeconds: 5
        #   periodSeconds: 5

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: k8s-service-nodeport
#   labels:
#     name: k8s-service
#     env: dev
# spec:
#   type: NodePort
  # sessionAffinity: ClientIP
  # selector:
  #   app: kuber
  # ports:
  #   - port: 8000
  #     targetPort: http
  #     protocol: TCP
  #     nodePort: 30004

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: k8s-service-clusterip
#   labels:
#     name: k8s-service
#     env: dev
# spec:
#   type: ClusterIP
#   selector:
#     app: http-server
#   ports:
#     - port: 80
#       targetPort: http
#       protocol: TCP

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: k8s-service-headless
#   labels:
#     name: k8s-service
#     env: dev
# spec:
#   type: ClusterIP
#   clusterIP: None
#   selector:
#     app: http-server
#   ports:
#     - port: 80
#       targetPort: http
#       protocol: TCP

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: k8s-service-external;
#   labels:
#     name: k8s-service
#     env: dev
# spec:
#   type: ExternalName
#   externalName: example.com

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: k8s-service-lb
#   labels:
#     name: k8s-service
#     env: dev      
# spec:
#   type: LoadBalancer
#   selector:
#     app: http-server
#   ports:
#   - protocol: TCP
#     port: 33333
#     targetPort: http
